services:
  # =============================================================================
  # TRAEFIK REVERSE PROXY
  # =============================================================================
  tailscale-traefik:
    image: tailscale/tailscale
    environment:
      - TS_AUTHKEY=${TAILSCALE_CLIENT_SECRET}
      - TS_EXTRA_ARGS=--advertise-tags=tag:${TS_TAG}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_HOSTNAME=traefik-${PARTITION}
    volumes:
      - tailscale-traefik-state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
      - tailscale-socket:/tmp
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped

  update-dns:
    image: tailscale/tailscale
    restart: "no"
    network_mode: service:tailscale-traefik
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - DOMAIN=${DOMAIN}
      - PARTITION=${PARTITION}
      - TS_STATE_DIR=/var/lib/tailscale
    volumes:
      - ./update-dns.sh:/update-dns.sh:ro
      - tailscale-traefik-state:/var/lib/tailscale:ro
      - tailscale-socket:/tmp:ro
    depends_on:
      tailscale-traefik:
        condition: service_started
    entrypoint: ["/bin/sh", "-c"]
    command: ["apk add --no-cache curl jq && /update-dns.sh"]

  traefik:
    image: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    depends_on:
      tailscale-traefik:
        condition: service_started
      update-dns:
        condition: service_completed_successfully
    network_mode: service:tailscale-traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/certs:/certs
    command:
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --api.dashboard=true
      - --ping=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesresolvers.letsencrypt.acme.email=${CF_API_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${PARTITION}.${DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${PARTITION}.${DOMAIN}
      - --log.level=DEBUG
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${PARTITION}.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8080/ping || exit 1",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  traefik-https-check:
    image: curlimages/curl:latest
    restart: "no"
    depends_on:
      traefik:
        condition: service_healthy
    network_mode: service:tailscale-traefik
    command: sleep infinity
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsSL --max-time 10 https://traefik.${PARTITION}.${DOMAIN}",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # =============================================================================
  # POSTGRES DATABASE
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # =============================================================================
  # PLC (DID METHOD) SERVICE
  # =============================================================================

  plc:
    # image: ghcr.io/erikologic/did-method-plc:latest
    build:
      context: ../did-method-plc
      dockerfile: packages/server/Dockerfile
    environment:
      DB_CREDS_JSON: '{"username":"plc","password":"plc","host":"postgres","port":"5432","database":"plc"}'
      DB_MIGRATE_CREDS_JSON: '{"username":"plc","password":"plc","host":"postgres","port":"5432","database":"plc"}'
      ENABLE_MIGRATIONS: "true"
      LOG_ENABLED: "true"
      LOG_LEVEL: "info"
      PORT: 3000
    depends_on:
      traefik-https-check:
        condition: service_healthy
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plc.rule=Host(`plc.${PARTITION}.${DOMAIN}`)"
      - "traefik.http.routers.plc.entrypoints=websecure"
      - "traefik.http.routers.plc.tls.certresolver=letsencrypt"
      - "traefik.http.services.plc.loadbalancer.server.port=3000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --output-document=/dev/null http://localhost:3000/_health",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # =============================================================================
  # PDS (PERSONAL DATA SERVER) SERVICE
  # =============================================================================

  pds:
    image: ghcr.io/bluesky-social/pds:latest
    environment:
      NODE_ENV: production
      PDS_ADMIN_PASSWORD: admin123
      PDS_BLOBSTORE_DISK_LOCATION: /app/data/blobs
      PDS_DATA_DIRECTORY: /app/data
      PDS_DID_PLC_URL: https://plc.${PARTITION}.${DOMAIN}
      PDS_HOSTNAME: pds.${PARTITION}.${DOMAIN}
      PDS_JWT_SECRET: dev-secret-change-in-production
      PDS_PORT: 3000
      PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX: da7a7d92e8d8f8e6f2a5a1b8c4d3e2f1a9b7c5d4e3f2a8b6c9d7e5f3a1b4c6d8
      PDS_RECOVERY_DID_KEY: did:key:zQ3shsd3JjGDd8auYXp76QWijpjiwbPUv4oVdcACmXBjYnRsa
      PDS_DISABLE_SSRF_PROTECTION: true
      PDS_DEV_MODE: true
      PDS_INVITE_REQUIRED: false
      PDS_BSKY_APP_VIEW_URL: https://bsky.${PARTITION}.${DOMAIN}
      PDS_BSKY_APP_VIEW_DID: did:web:bsky.${PARTITION}.${DOMAIN}
      LOG_ENABLED: "true"
      LOG_LEVEL: "debug"
    volumes:
      - pds_data:/app/data
    depends_on:
      traefik-https-check:
        condition: service_healthy
      plc:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pds.rule=Host(`pds.${PARTITION}.${DOMAIN}`) || HostRegexp(`^.+\\.pds\\.${PARTITION}\\.${DOMAIN}$$`)"
      - "traefik.http.routers.pds.entrypoints=websecure"
      - "traefik.http.routers.pds.tls.certresolver=letsencrypt"
      - "traefik.http.routers.pds.tls.domains[0].main=pds.${PARTITION}.${DOMAIN}"
      - "traefik.http.routers.pds.tls.domains[0].sans=*.pds.${PARTITION}.${DOMAIN}"
      - "traefik.http.services.pds.loadbalancer.server.port=3000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --output-document=/dev/null http://localhost:3000/xrpc/_health",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # =============================================================================
  # RELAY SERVICE
  # =============================================================================

  relay:
    # image: ghcr.io/erikologic/indigo:relay-latest
    build:
      context: ../indigo
      dockerfile: cmd/relay/Dockerfile
    environment:
      DATABASE_URL: postgres://relay:relay@postgres:5432/relay
      RELAY_PLC_HOST: https://plc.${PARTITION}.${DOMAIN}
      RELAY_ADMIN_PASSWORD: admin123
      RELAY_PERSIST_DIR: /data/relay/persist
      RELAY_ALLOW_INSECURE_HOSTS: "true"
      RELAY_DISABLE_REQUEST_CRAWL: "false"
      RELAY_API_LISTEN: 0.0.0.0:3000
      RELAY_ALLOW_PRIVATE_NETWORKS: "true"
      ENVIRONMENT: dev
      LOG_LEVEL: trace
    volumes:
      - relay_data:/data/relay
    depends_on:
      traefik-https-check:
        condition: service_healthy
      postgres:
        condition: service_healthy
      pds:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.relay.rule=Host(`relay.${PARTITION}.${DOMAIN}`)"
      - "traefik.http.routers.relay.entrypoints=websecure"
      - "traefik.http.routers.relay.tls.certresolver=letsencrypt"
      - "traefik.http.services.relay.loadbalancer.server.port=3000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --output-document=/dev/null http://localhost:3000/_health",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # =============================================================================
  # JETSTREAM SERVICE
  # =============================================================================

  jetstream:
    # image: ghcr.io/erikologic/jetstream:latest
    build:
      context: ../jetstream
      dockerfile: Dockerfile
    restart: always
    environment:
      - JETSTREAM_DATA_DIR=/data
      - JETSTREAM_WS_URL=wss://relay.${PARTITION}.${DOMAIN}/xrpc/com.atproto.sync.subscribeRepos
      - JETSTREAM_LISTEN_ADDR=:6008
      - JETSTREAM_LIVENESS_TTL=3600s
    volumes:
      - jetstream_data:/data
    depends_on:
      traefik-https-check:
        condition: service_healthy
      postgres:
        condition: service_healthy
      relay:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jetstream.rule=Host(`jetstream.${PARTITION}.${DOMAIN}`)"
      - "traefik.http.routers.jetstream.entrypoints=websecure"
      - "traefik.http.routers.jetstream.tls.certresolver=letsencrypt"
      - "traefik.http.services.jetstream.loadbalancer.server.port=6008"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:6008"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # =============================================================================
  # OZONE MODERATION SERVICE
  # =============================================================================

  ozone:
    image: ghcr.io/bluesky-social/ozone:latest
    environment:
      - OZONE_DB_POSTGRES_URL=postgres://ozone:ozone@postgres:5432/ozone
      - OZONE_DB_MIGRATE=1
      - OZONE_SERVER_DID=did:web:ozone.${PARTITION}.${DOMAIN}
      - OZONE_PUBLIC_URL=https://ozone.${PARTITION}.${DOMAIN}
      - OZONE_DID_PLC_URL=https://plc.${PARTITION}.${DOMAIN}
      - OZONE_APPVIEW_URL=https://bsky.${PARTITION}.${DOMAIN}
      - OZONE_APPVIEW_DID=did:web:bsky.${PARTITION}.${DOMAIN}
      - OZONE_ADMIN_PASSWORD=admin123
      - OZONE_ADMIN_DIDS=did:web:ozone.${PARTITION}.${DOMAIN}
      - OZONE_SIGNING_KEY_HEX=da7a7d92e8d8f8e6f2a5a1b8c4d3e2f1a9b7c5d4e3f2a8b6c9d7e5f3a1b4c6d8
      - NODE_ENV=production
      - LOG_ENABLED=true
      - LOG_LEVEL=info
      - PORT=3000
    volumes:
      - ozone_data:/data
    depends_on:
      traefik-https-check:
        condition: service_healthy
      postgres:
        condition: service_healthy
      plc:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ozone.rule=Host(`ozone.${PARTITION}.${DOMAIN}`)"
      - "traefik.http.routers.ozone.entrypoints=websecure"
      - "traefik.http.routers.ozone.tls.certresolver=letsencrypt"
      - "traefik.http.services.ozone.loadbalancer.server.port=3000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --output-document=/dev/null http://localhost:3000",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # =============================================================================
  # OPENTELEMETRY COLLECTOR
  # =============================================================================
  otel:
    profiles: ["otel"]
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4318:4318"
      - "8126:8126"

  # =============================================================================
  # BSKY SERVICE
  # =============================================================================
  redis:
    image: redis:7-bookworm
    restart: always

  bsky:
    # image: ghcr.io/erikologic/atproto:bsky-latest
    build:
      context: ../atproto
      dockerfile: services/bsky/Dockerfile
    environment:
      - BSKY_ADMIN_PASSWORDS=password123
      - BSKY_BLOB_CACHE_LOC=/cache/
      - BSKY_BSYNC_HTTP_VERSION=1.1
      - BSKY_BSYNC_PORT=3002
      - BSKY_BSYNC_URL=http://localhost:3002
      - BSKY_DATAPLANE_HTTP_VERSION=1.1
      - BSKY_DATAPLANE_PORT=3001
      - BSKY_DATAPLANE_URLS=http://localhost:3001
      - BSKY_DB_POSTGRES_SCHEMA=bsky
      - BSKY_DB_POSTGRES_URL=postgres://bsky:bsky@postgres:5432/bsky
      - BSKY_DB_POOL_SIZE=100
      - BSKY_DID_PLC_URL=https://plc.${PARTITION}.${DOMAIN}
      - BSKY_PUBLIC_URL=https://bsky.${PARTITION}.${DOMAIN}
      - BSKY_REPO_PROVIDER=wss://relay.${PARTITION}.${DOMAIN}
      - BSKY_SERVER_DID=did:web:bsky.${PARTITION}.${DOMAIN}
      - BSKY_SERVICE_SIGNING_KEY=da7a7d92e8d8f8e6f2a5a1b8c4d3e2f1a9b7c5d4e3f2a8b6c9d7e5f3a1b4c6d8
      - BSKY_INDEXED_AT_EPOCH=${BSKY_INDEXED_AT_EPOCH:-2022-11-17T00:35:16.391+00:00}
      - BSKY_VIDEO_PLAYLIST_URL_PATTERN=https://video.bsky.app/watch/%s/%s/playlist.m3u8
      - BSKY_VIDEO_THUMBNAIL_URL_PATTERN=https://video.bsky.app/watch/%s/%s/thumbnail.jpg
      - MOD_SERVICE_DID=did:web:ozone.${PARTITION}.${DOMAIN}
      - CLUSTER_WORKER_COUNT=3
      - DEBUG_MODE=1
      - LOG_DESTINATION=1
      - LOG_ENABLED=true
      - LOG_LEVEL=trace
      - NODE_ENV=${NODE_ENV:-production}
      - NODE_OPTIONS=--max-old-space-size=32768
      - REDIS_HOST=redis
      - PORT=2584
      - DD_AGENT_HOST=otel
      - DD_TRACE_AGENT_PORT=8126
      - DD_TRACE_ENABLED=true
      - DD_LOGS_INJECTION=true
      - DD_SERVICE=bsky
      - DD_ENV=dev
    depends_on:
      traefik-https-check:
        condition: service_healthy
      postgres:
        condition: service_healthy
      relay:
        condition: service_healthy
      ozone:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bsky.rule=Host(`bsky.${PARTITION}.${DOMAIN}`)"
      - "traefik.http.routers.bsky.entrypoints=websecure"
      - "traefik.http.routers.bsky.tls.certresolver=letsencrypt"
      - "traefik.http.services.bsky.loadbalancer.server.port=2584"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --output-document=/dev/null http://localhost:2584",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # =============================================================================
  # FEED GENERATOR SERVICE
  # =============================================================================
  feedgen:
    # image: ghcr.io/erikologic/feed-generator:latest
    build:
      context: ../feed-generator
      dockerfile: Dockerfile
    volumes:
      - feedgen_data:/data
    environment:
      - FEEDGEN_PORT=3000
      - FEEDGEN_LISTENHOST=0.0.0.0
      - FEEDGEN_SQLITE_LOCATION=/data/db.sqlite
      - FEEDGEN_SUBSCRIPTION_ENDPOINT=wss://relay.${PARTITION}.${DOMAIN}
      - FEEDGEN_HOSTNAME=feedgen.${PARTITION}.${DOMAIN}
      - FEEDGEN_SUBSCRIPTION_RECONNECT_DELAY=3000
    depends_on:
      traefik-https-check:
        condition: service_healthy
      relay:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.feedgen.rule=Host(`feedgen.${PARTITION}.${DOMAIN}`)"
      - "traefik.http.routers.feedgen.entrypoints=websecure"
      - "traefik.http.routers.feedgen.tls.certresolver=letsencrypt"
      - "traefik.http.services.feedgen.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3000/.well-known/did.json || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # =============================================================================
  # PREPARATION SERVICE
  # =============================================================================
  prepare:
    image: alpine:latest
    depends_on:
      traefik-https-check:
        condition: service_healthy
      relay:
        condition: service_healthy
      feedgen:
        condition: service_healthy
    working_dir: /app
    environment:
      - DOMAIN=${DOMAIN}
      - PARTITION=${PARTITION}
    volumes:
      - ./prepare.sh:/app/prepare.sh:ro
      - feedgen_publisher_did:/shared
    command: sh -c "apk add --no-cache curl && sh /app/prepare.sh"
    healthcheck:
      test: ["CMD-SHELL", "test -f /tmp/ready"]
      interval: 2s
      timeout: 1s
      retries: 3
      start_period: 5s

  # =============================================================================
  # SOCIAL-APP SERVICE
  # =============================================================================

  social:
    # image: ghcr.io/erikologic/social-app:latest
    build:
      context: ../social-app
      dockerfile: Dockerfile
    entrypoint: ["/usr/local/bin/social-wrapper.sh"]
    environment:
      - ATP_APPVIEW_HOST=https://bsky.${PARTITION}.${DOMAIN}
      - ATP_PUBLIC_APPVIEW_HOST=https://bsky.${PARTITION}.${DOMAIN}
    volumes:
      - feedgen_publisher_did:/shared:ro
      - ./social-wrapper.sh:/usr/local/bin/social-wrapper.sh:ro
    depends_on:
      traefik-https-check:
        condition: service_healthy
      bsky:
        condition: service_healthy
      feedgen:
        condition: service_started
      prepare:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.social.rule=Host(`social.${PARTITION}.${DOMAIN}`)"
      - "traefik.http.routers.social.entrypoints=websecure"
      - "traefik.http.routers.social.tls.certresolver=letsencrypt"
      - "traefik.http.services.social.loadbalancer.server.port=8100"
    healthcheck:
      # TODO need a better healthcheck
      test: ["CMD-SHELL", "pidof bskyweb || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # =============================================================================
  # E2E TESTS
  # =============================================================================
  e2e-jest:
    profiles: ["test"]
    image: node:22-alpine
    working_dir: /app
    environment:
      - DOMAIN=${DOMAIN}
      - PARTITION=${PARTITION}
    volumes:
      - ./e2e:/app/e2e
      - ./jest.config.js:/app/jest.config.js
      - ./package-lock.json:/app/package-lock.json
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
    depends_on:
      prepare:
        condition: service_healthy
      jetstream:
        condition: service_healthy
      bsky:
        condition: service_healthy
    command: >
      sh -c "npm install && npm test"

  e2e-playwright:
    profiles: ["test"]
    image: mcr.microsoft.com/playwright:v1.55.1-noble
    working_dir: /app
    environment:
      - DOMAIN=${DOMAIN}
      - PARTITION=${PARTITION}
      - CI=true
    volumes:
      - ./e2e:/app/e2e
      - ./playwright.config.ts:/app/playwright.config.ts
      - ./package-lock.json:/app/package-lock.json
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./playwright-report:/app/playwright-report
      - ./test-results:/app/test-results
    depends_on:
      e2e-jest:
        condition: service_completed_successfully
      social:
        condition: service_started
    command: >
      sh -c "npm install && npm run test:browser"

volumes:
  postgres_data:
  pds_data:
  relay_data:
  jetstream_data:
  ozone_data:
  feedgen_data:
  feedgen_publisher_did:
  tailscale-traefik-state:
  tailscale-socket:
